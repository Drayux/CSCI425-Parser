###
# ZOBOS.CFG --- ZOBOS and CZAR compiler projects
# This is an SLR(1) grammar
###
MODULE    -> MODPARTS $

# a MODULE is a *non-empty* collection of global DECLIDs, FUNSIGs,
# or FUNCTION definitions
MODPARTS  -> GCTDECLLIST sc | GCTDECLLIST sc MODPARTS
           | GFTDECLLIST sc | GFTDECLLIST sc MODPARTS
           | FUNSIG sc | FUNSIG sc MODPARTS
		   | FUNCTION  | FUNCTION  MODPARTS
		   | EMIT   sc | EMIT   sc MODPARTS

GCTDECLLIST -> GLOBTYPE DECLIDS
GFTDECLLIST ->  FUNTYPE DECLIDS

GLOBTYPE  -> const bool
           | const int
		   | const float
		   | string

# function signatures (aka "header" or prototype) 
FUNSIG    -> FUNTYPE id lparen PARAMLIST rparen
FUNTYPE   -> bool | int | float 
PARAMLIST -> FUNTYPE id comma PARAMLIST 
           | FUNTYPE id
		   | NOPARAMS
NOPARAMS  -> lambda

# function definitions implicitly declare a variable holding the 
# return value (returns _id_) before any function definition statements
FUNCTION  -> FUNSIG returns id assign EXPR BRACESTMTS
BRACESTMTS -> lbrace STMTS rbrace
STMTS     -> STMTS STATEMENT
           | lambda
STATEMENT -> BRACESTMTS
           | DECLLIST sc
           | ASSIGN sc
           | IF
           | IFELSE
           | WHILE
           | EMIT sc

# declaring variables
DECLTYPE  -> const bool
           | bool
           | const int
           | int
           | string
           | const float
           | float
DECLID    -> id 
           | ASSIGN
DECLIDS   -> DECLID
           | DECLIDS comma DECLID
DECLLIST  -> DECLTYPE DECLIDS 

# assignment
ASSIGN    -> id assign EXPR 
           | id assign ASSIGN

# control structures
IF        -> if lparen BEXPR rparen STATEMENT
IFELSE    -> if lparen BEXPR rparen BRACESTMTS else STATEMENT
WHILE     -> while lparen BEXPR rparen STATEMENT

EXPR      -> BEXPR | AEXPR | FUNCALL

# function calls
FUNCALL   -> id lparen ARGLIST rparen
ARGLIST   -> ARGLIST comma EXPR
           | EXPR
		   | lambda

# boolean expressions
BOOLS     -> lt | leq | eq | geq | gt
BEXPR     -> AEXPR BOOLS AEXPR

# arithmetic expressions
PLUS      -> plus | minus
TIMES     -> mult | div | mod
AEXPR     -> SUM
SUM       -> SUM PLUS PRODUCT
           | PRODUCT
PRODUCT   -> PRODUCT TIMES VALUE
           | VALUE
VALUE     -> lparen EXPR rparen 
           | intval
           | floatval
           | stringval
           | id 
           | UNARY
           | CAST
UNARY     -> PLUS VALUE
           | not VALUE
           | compl VALUE
CAST      -> bool lparen EXPR rparen
           | int lparen EXPR rparen
           | float lparen EXPR rparen

# The first EMIT form would produce the string variable id on an output device,
# the first AEXPR is the initial character index, the second AEXPR is the
# number of characters to emit.
# The second EMIT form produces the AEXPR value on an output device. 
# The third EMIT form produces is a nicety because 
#   emit ( sin(pi) )  
# seems like too many parenthesis.
# On  emit symtable, write the current symbol table to the third command line
# argument provided to ZOBOS
EMIT      -> emit id comma AEXPR comma AEXPR
           | emit lparen AEXPR rparen
           | emit symtable

